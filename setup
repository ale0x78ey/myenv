#!/bin/bash
set -x

SHORT_OPTIONS="hi:e:"
LONG_OPTIONS="help,inventory:,hosts:,extra-variables:"

function usage() {
cat<< EOF
Usage: $0 COMMANDS [options]

Options:
  --help, -h             Display help text.
  --inventory, -i <path> Specify path to ansible inventory file or directory.
  --hosts <hosts>        Specify target hosts.
  --extra-variables, -e [key=value {key=value}]
                         Pass variables to the command line for ansible-playbook.

Commands:
  system [default|libvirt]
                         Setup system.
  openstack              Setup OpenStack.
  vim                    Setup vim.
  cicd                   Setup CI/CD.

EOF
}

setup_brew() {
  if [[ ! "`which brew`" ]]; then
    INSTALL_SH=https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
    /bin/bash -c "$(curl -fsSL ${INSTALL_SH})"
    brew update
  fi

  export HOMEBREW_NO_AUTO_UPDATE=1
}

if [[ "`uname -s`" == "Darwin" ]]; then
  install() {
    if [[ ! "`brew list --formula | grep $1`" ]]; then
      brew install $@
    fi
  }

  setup_brew && install gnu-tar \
                        gnu-getopt

  export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
  hash getopt
fi

if [[ "`uname -s`" == "Linux" ]]; then
  install() {
    if [[ "`which apt-get`" ]]; then
      sudo apt-get install -y $@
    else
      echo "Unsupported system!"
      exit -4
    fi
  }
fi

ARGS=$(getopt -o "${SHORT_OPTIONS}" -l "${LONG_OPTIONS}" --name "$0" -- "$@")

if [ $? -ne 0 ]; then
  usage >&2
  exit -1
fi

eval set -- ${ARGS}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null && pwd)"
INVENTORY="${SCRIPT_DIR}/inventories.d/default"

while [ "$#" -gt 0 ]; do
  case "$1" in
    (--help|-h)
      usage >&2
      exit 0
      ;;

    (--inventory|-i)
      INVENTORY="$2"
      shift 2
      ;;

    (--hosts)
      HOSTS="$2"
      shift 2
      ;;

    (--extra-variables|-e)
      ANSIBLE_EXTRA_VARIABLES="$2"
      shift 2
      ;;

    (--)
      shift
      break
      ;;

    (*)
      usage >&2
      exit -2
      ;;
  esac
done

while [ "$#" -gt 0 ]; do
  case "$1" in
    (system)
      SYSTEM=1
      SYSTEM_SUBCOMMAND="$2"
      shift 2
      ;;

    (openstack)
      OPENSTACK=1
      shift
      ;;

    (vim)
      VIM=1
      shift
      ;;

    (cicd)
      CICD=1
      shift
      ;;

    (*)
      usage >&2
      exit -3
      ;;
  esac
done

if [[ "`uname -s`" == "Linux" ]]; then
  install build-essential \
          curl            \
          gcc             \
          git             \
          libffi-dev      \
          libssl-dev      \
          python3         \
          python3-apt     \
          python3-dev     \
          python3-pip     \
          python3-venv

  export PATH="$HOME/.local/bin:$PATH"
fi

# Make ansible transform invalid characters in group
# names supplied by inventory sources. If 'never' it
# will allow for the group name but warn about the
# issue. When 'ignore', it does the same as 'never',
# without issuing a warning. When 'always' it will
# replace any invalid characters with '_' and warn
# the user. When 'silently', it does the same as 'always',
# without issuing a warning.
export ANSIBLE_TRANSFORM_INVALID_GROUP_CHARS='ignore'

if ! `python3 -m pip &> /dev/null`; then
  curl https://bootstrap.pypa.io/get-pip.py | python3 -
fi

if [[ -e ${SCRIPT_DIR}/.venv ]]; then
  source ${SCRIPT_DIR}/.venv/bin/activate && trap deactivate EXIT
fi

python3 -m pip install -U certifi
python3 -m pip install setuptools wheel
python3 -m pip install ansible==2.9.17
python3 -m pip install kolla-ansible==11.0.0

if [ "$SYSTEM" ]; then
  if [[ "$SYSTEM_SUBCOMMAND" == "libvirt" ]]; then
    ansible-galaxy collection install community.libvirt
  fi
fi

if [ "$CICD" ]; then
  ansible-galaxy collection install community.kubernetes
fi

if [ "$HOSTS" ]; then
  if [ "$ANSIBLE_EXTRA_VARIABLES" ]; then
    ANSIBLE_EXTRA_VARIABLES="myenv_hosts=${HOSTS} ${ANSIBLE_EXTRA_VARIABLES}"
  else
    ANSIBLE_EXTRA_VARIABLES="myenv_hosts=${HOSTS}"
  fi
fi

if [ "$SYSTEM" ]; then
  if [[ "$SYSTEM_SUBCOMMAND" == "libvirt" ]]; then
    ansible-playbook -i "${INVENTORY}" \
                     -e "${ANSIBLE_EXTRA_VARIABLES}" \
                     ${SCRIPT_DIR}/playbooks/setup_libvirt.yml
  fi

  if [[ "$SYSTEM_SUBCOMMAND" == "default" ]]; then
    ansible-playbook -i "${INVENTORY}" \
                     -e "${ANSIBLE_EXTRA_VARIABLES}" \
                     ${SCRIPT_DIR}/playbooks/setup_system.yml
  fi
fi

if [ "$OPENSTACK" ]; then
  ansible-playbook -i "${INVENTORY}" \
                   -e "${ANSIBLE_EXTRA_VARIABLES}" \
                   ${SCRIPT_DIR}/playbooks/setup_openstack.yml

cat<< EOF
Don't forget to reload configured hosts to apply network settings.

To mount cinder-backup nfs:
sudo mount /var/nfs/cinder-backup --fstab /etc/fstab.d/nfs.fstab
EOF
fi

if [ "$VIM" ]; then
  source ${SCRIPT_DIR}/setup_vim
fi

if [ "$CICD" ]; then
  ansible-playbook -i "${INVENTORY}" \
                   -e "${ANSIBLE_EXTRA_VARIABLES}" \
                   ${SCRIPT_DIR}/playbooks/setup_cicd.yml
fi

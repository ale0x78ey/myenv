#!/bin/bash
set -x

SHORT_OPTIONS="hi:e:"
LONG_OPTIONS="help,inventory:,extra-variables:"

function usage() {
cat<< EOF
Usage: $0 COMMANDS [options]

Options:
  --help, -h             Display help text.
  --inventory, -i <path> Specify path to ansible inventory file or directory.

  --extra-variables, -e [key=value {key=value} | JSON]
                         Pass variables to the command line for ansible-playbook.

Commands [Deploy]:
  configs                Install configs for all deploy tools.
  configs-ansible        Install ansible configs.
  configs-kolla          Install kolla configs.
  configs-kolla-build    Install kolla-build configs.
  kolla-ansible          Install kolla-ansible.
  kolla-build            Install kolla-build.

Commands [System]:
  system                 Setup system.
  python                 Setup python.
  ruby                   Setup ruby.
  docker-registry        Setup Docker registry.
  jekyll                 Setup Jekyll.

Commands [OpenStack]:
  openstack-network      Setup OpenStack network.
  openstack-nfs-servers  Setup OpenStack nfs servers.
  openstack-nfs-clients  Setup OpenStack nfs clients.
  openstack-nfs          Setup OpenStack nfs servers and clients.
  openstack              Setup OpenStack.

Environment variables:
  KOLLA_SOURCES

EOF
}

setup_brew() {
  if [[ ! "`which brew`" ]]; then
    INSTALL_SH=https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
    /bin/bash -c "$(curl -fsSL ${INSTALL_SH})"
    brew update
  fi

  export HOMEBREW_NO_AUTO_UPDATE=1
}

if [[ "`uname -s`" == "Darwin" ]]; then
  install() {
    if [[ ! "`brew list --formula | grep $1`" ]]; then
      brew install $@
    fi
  }

  setup_brew && install gnu-tar \
                        gnu-getopt

  export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
  hash getopt
fi

if [[ "`uname -s`" == "Linux" ]]; then
  install() {
    if [[ "`which apt-get`" ]]; then
      sudo apt-get install -y $@
    else
      echo "Unsupported system!"
      exit -4
    fi
  }
fi

ARGS=$(getopt -o "${SHORT_OPTIONS}" -l "${LONG_OPTIONS}" --name "$0" -- "$@")

if [ $? -ne 0 ]; then
  usage >&2
  exit -1
fi

eval set -- ${ARGS}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null && pwd)"
INVENTORY="${SCRIPT_DIR}/ansible_inventories.d"

while [ "$#" -gt 0 ]; do
  case "$1" in
    (--help|-h)
      usage >&2
      exit 0
      ;;

    (--inventory|-i)
      INVENTORY="$2"
      shift 2
      ;;

    (--extra-variables|-e)
      ANSIBLE_EXTRA_VARIABLES="$2"
      shift 2
      ;;

    (--)
      shift
      break
      ;;

    (*)
      usage >&2
      exit -2
      ;;
  esac
done

while [ "$#" -gt 0 ]; do
  case "$1" in
    (configs)
      CONFIGS_ANSIBLE=1
      CONFIGS_KOLLA=1
      CONFIGS_KOLLA_BUILD=1
      shift
      ;;

    (configs-ansible)
      CONFIGS_ANSIBLE=1
      shift
      ;;

    (configs-kolla)
      CONFIGS_KOLLA=1
      shift
      ;;

    (configs-kolla-build)
      CONFIGS_KOLLA_BUILD=1
      shift
      ;;

    (kolla-ansible)
      KOLLA_ANSIBLE=1
      shift
      ;;

    (kolla-build)
      KOLLA_BUILD=1
      shift
      ;;

    (system)
      SYSTEM=1
      shift
      ;;

    (python)
      PYTHON=1
      shift
      ;;

    (docker-registry)
      DOCKER_REGISTRY=1
      shift
      ;;

    (ruby)
      RUBY=1
      shift
      ;;

    (jekyll)
      JEKYLL=1
      shift
      ;;

    (openstack-network)
      OPENSTACK_NETWORK=1
      shift
      ;;

    (openstack-nfs-servers)
      OPENSTACK_NFS_SERVERS=1
      shift
      ;;

    (openstack-nfs-clients)
      OPENSTACK_NFS_CLIENTS=1
      shift
      ;;

    (openstack-nfs)
      OPENSTACK_NFS_SERVERS=1
      OPENSTACK_NFS_CLIENTS=1
      shift
      ;;

    (openstack)
      OPENSTACK_NETWORK=1
      OPENSTACK_NFS_SERVERS=1
      OPENSTACK_NFS_CLIENTS=1
      shift
      ;;

    (*)
      usage >&2
      exit -3
      ;;
  esac
done

if [[ "`uname -s`" == "Linux" ]]; then
  install build-essential \
          curl            \
          gcc             \
          git             \
          libffi-dev      \
          libssl-dev      \
          python3         \
          python3-dev     \
          python3-venv
fi

if ! `python3 -m pip &>/dev/null`; then
  curl https://bootstrap.pypa.io/get-pip.py | python3 -
fi

VENV_DIR=${SCRIPT_DIR}/.venv
if [[ ! -d ${VENV_DIR} ]]; then
  python3 -m venv ${VENV_DIR}
fi

. ${VENV_DIR}/bin/activate && trap deactivate EXIT

python3 -m pip install -U pip
python3 -m pip install \
  setuptools \
  wheel

python3 -m pip install 'ansible==2.9.17'

# Make ansible transform invalid characters in group
# names supplied by inventory sources. If 'never' it
# will allow for the group name but warn about the
# issue. When 'ignore', it does the same as 'never',
# without issuing a warning. When 'always' it will
# replace any invalid characters with '_' and warn
# the user. When 'silently', it does the same as 'always',
# without issuing a warning.
export ANSIBLE_TRANSFORM_INVALID_GROUP_CHARS='ignore'

if [ "$CONFIGS_ANSIBLE" ]; then
  USER_GROUP=`groups | cut -d" " -f1`
  sudo mkdir -p /etc/ansible
  sudo chown ${USER}:${USER_GROUP} /etc/ansible
  ln -fns ${SCRIPT_DIR}/etc/ansible/ansible.cfg \
                       /etc/ansible/ansible.cfg
fi

function make_etc_kolla() {
  USER_GROUP=`groups | cut -d" " -f1`
  sudo mkdir -p /etc/kolla
  sudo chown ${USER}:${USER_GROUP} /etc/kolla
}

if [ "$KOLLA_ANSIBLE" ]; then
  python3 -m pip install 'kolla-ansible==11.0.0'
  make_etc_kolla

  KOLLA_ETC_EXAMPLES="$(dirname $(dirname `which kolla-ansible`))"
  KOLLA_ETC_EXAMPLES=${KOLLA_ETC_EXAMPLES}/share/kolla-ansible/etc_examples/kolla

  for i in globals.yml passwords.yml
  do
    if [ -e ${SCRIPT_DIR}/etc/kolla/$i ]; then continue; fi
    cp ${KOLLA_ETC_EXAMPLES}/$i ${SCRIPT_DIR}/etc/kolla/
  done

  # Fill blank passwords.
  kolla-genpwd -p ${SCRIPT_DIR}/etc/kolla/passwords.yml
fi

if [ "$KOLLA_BUILD" ]; then
  KOLLA_SOURCES="${KOLLA_SOURCES:-${SCRIPT_DIR}/../kolla}"
  if [ ! -d "$KOLLA_SOURCES" ]; then
    git clone https://github.com/openstack/kolla ${KOLLA_SOURCES}
    if [ -d "$KOLLA_SOURCES" ]; then
      pushd ${KOLLA_SOURCES}
      # Tag stable/victoria.
      git checkout ff3192af9e3e54d528235c616d393fc88aaef0db
      popd
    fi
  fi

  if [ -d "$KOLLA_SOURCES" ]; then
    python3 -m pip install -r \
      ${KOLLA_SOURCES}/requirements.txt

    if [ ! -e "${SCRIPT_DIR}/etc/kolla/kolla-build.conf" ]; then
      pushd ${KOLLA_SOURCES}
      install tox && tox -e genconfig
      cp etc/kolla/kolla-build.conf "${SCRIPT_DIR}/etc/kolla/kolla-build.conf"
      popd
    fi
  fi
fi

if [ "$CONFIGS_KOLLA_BUILD" ]; then
  make_etc_kolla
  ln -fns ${SCRIPT_DIR}/etc/kolla/kolla-build.conf \
                       /etc/kolla/kolla-build.conf
fi

if [ "$CONFIGS_KOLLA" ]; then
  make_etc_kolla
  ln -fns ${SCRIPT_DIR}/etc/kolla/{config,globals.yml,passwords.yml} \
                       /etc/kolla/
fi

if [ "$SYSTEM" ]; then
  ansible-playbook -i "${INVENTORY}" \
                   -e "${ANSIBLE_EXTRA_VARIABLES}" \
                   ${SCRIPT_DIR}/playbooks/setup_system.yml
fi

if [ "$PYTHON" ]; then
  ansible-playbook -i "${INVENTORY}" \
                   -e "${ANSIBLE_EXTRA_VARIABLES}" \
                   ${SCRIPT_DIR}/playbooks/setup_python.yml
fi

if [ "$RUBY" ]; then
  ansible-playbook -i "${INVENTORY}" \
                   -e "${ANSIBLE_EXTRA_VARIABLES}" \
                   ${SCRIPT_DIR}/playbooks/setup_ruby.yml
fi

if [ "$JEKYLL" ]; then
  ansible-playbook -i "${INVENTORY}" \
                   -e "${ANSIBLE_EXTRA_VARIABLES}" \
                   ${SCRIPT_DIR}/playbooks/setup_jekyll.yml
fi

if [ "$DOCKER_REGISTRY" ]; then
  docker run -d --name registry \
             --restart=always \
             -p 4000:5000 \
             -v registry:/var/lib/registry \
             registry:2

  sudo cp -rf ${SCRIPT_DIR}/etc/docker/* /etc/docker/
  if [[ "`uname -s`" == "Linux" ]]; then
    sudo systemctl restart docker
  fi
fi

if [ "$OPENSTACK_NETWORK" ]; then
  ansible-playbook -i "${INVENTORY}" \
                   -e "${ANSIBLE_EXTRA_VARIABLES}" \
                   ${SCRIPT_DIR}/playbooks/setup_network.yml

cat<< EOF
Don't forget to reload configured hosts to apply network settings.
EOF
fi

if [ "$OPENSTACK_NFS_SERVERS" ]; then
  ansible-playbook -i "${INVENTORY}" \
                   -e "${ANSIBLE_EXTRA_VARIABLES}" \
                   ${SCRIPT_DIR}/playbooks/setup_nfs_servers.yml
fi

if [ "$OPENSTACK_NFS_CLIENTS" ]; then
  ansible-playbook -i "${INVENTORY}" \
                   -e "${ANSIBLE_EXTRA_VARIABLES}" \
                   ${SCRIPT_DIR}/playbooks/setup_nfs_clients.yml
cat<< EOF
To mount cinder-backup:
sudo mount /var/nfs/cinder-backup --fstab /etc/fstab.d/nfs.fstab
EOF
fi
